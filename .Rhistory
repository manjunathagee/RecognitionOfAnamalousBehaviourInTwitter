library(MASS)
#library(caret)
library(ggplot2)
library(cowplot)
library(ggthemes)
library(caTools)
library(e1071)
library(ROCR)
library(dplyr)
library(GGally)
library(prettyunits)
library(chron)
library(lubridate)
library(tidyr)
library(cluster)
#####################################################################
#       I. EDA                                                      #
#####################################################################
###### DATA UNDERSTANDING, PREPARATION & DATA ANALYSIS ##############
startTime <- Sys.time()
tweets <- read.csv("tweets1.csv",stringsAsFactors = FALSE)
# structure of tweets dataframes
str(tweets)        # 140640 obs. of  14 variables
# summary of tweets dataframes
summary(tweets)
sum(duplicated(tweets$id))  # id is unique in the whole data
#removing the rows which contains NA's and empty values
tweets <- tweets[rowSums(is.na(tweets)) != ncol(tweets),]
tweets <- tweets[!apply(tweets == "", 1, all),]
####### Missing values (NA's) or Empty data handling
sum(is.na(tweets))  # 0 NA values so no need to do anything
sum(tweets=="") # 0 empty data in columns
# Removing the Redundant Columns
tweets <- tweets[,-7]
#Data Preprocessing - which will look for any null/Empty values for mandatory columns and removes the corresponding row
tweets <- tweets[rowSums(is.na(tweets)) != ncol(tweets),]
tweets <- tweets[!apply(tweets == "", 1, all),]
if(any(is.na(tweets[, "created_at"]))){
tweets <- tweets[!(is.na(tweets$created_at) | tweets$created_at == ""), ]
}
if(any(is.na(tweets[, "text"]))){
tweets <- tweets[!(is.na(tweets$text) | tweets$text==""), ]
}
if(any(is.na(tweets[, "favorite_count"]))){
tweets <- tweets[!(is.na(tweets$favorite_count) | tweets$favorite_count == ""), ]
}
if(any(is.na(tweets[, "followers_count"]))){
tweets <- tweets[!(is.na(tweets$followers_count) | tweets$followers_count==""), ]
}
if(any(is.na(tweets[, "friends_count"]))){
tweets <- tweets[!(is.na(tweets$friends_count) | tweets$friends_count==""), ]
}
if(any(is.na(tweets[, "user_created_at"]))){
tweets <- tweets[!(is.na(tweets$user_created_at) | tweets$user_created_at==""), ]
}
if(any(is.na(tweets[, "tweet_language"]))){
tweets <- tweets[!(is.na(tweets$tweet_language) | tweets$tweet_language==""), ]
}
#Utility function returns the difference in days between two date objects
# @param1 - date object one
# @param2 - date object two
# @return - differnce between two date objects in terms of days
dateDifference <- function(date1, date2=Sys.Date()){
as.numeric(difftime(date2,date1,units="days"))
}
##### convert continous independent variables values into numeric
tweets$favorite_count <- as.numeric(tweets$favorite_count)
tweets$retweet_count <- as.numeric(tweets$retweet_count)
tweets$followers_count <- as.numeric(tweets$followers_count)
tweets$friends_count <- as.numeric(tweets$friends_count)
# Derived columns
processeduserLongevity <- mutate(tweets, userLongevity = round(dateDifference(ymd_hms(user_created_at))))
tweets <- processeduserLongevity
processedtweetCount <- transform(tweets, tweetCount = ave(user_id, user_id, FUN = length))
tweets <- processedtweetCount
tweets$tweetCount <- as.numeric(tweets$tweetCount)
processedfriendShipRatio <- mutate(tweets, friendShipRatio = (tweets$friends_count/ tweets$userLongevity)*10)
tweets <- processedfriendShipRatio
processedfavoriteCountRatio <- mutate(tweets, favoriteCountRatio = tweets$favorite_count / tweets$userLongevity)
tweets <- processedfavoriteCountRatio
processedtweetsRatio <- mutate(tweets, tweetsRatio = tweets$tweetCount / tweets$userLongevity)
tweets <- processedtweetsRatio
#Compute Twitting Period - Which duration of the day does the user sends tweet
Q1 <- 0
Q2 <- 0
Q3 <- 0
Q4 <- 0
tweetingPeriod <- sapply(tweets$created_at, function(tweetTime){
sentTime <- hour(ymd_hms(tweetTime))
if(as.numeric(floor(sentTime/6)) == 0){
Q1 <- Q1+1
return (0)
} else if(as.numeric(floor(sentTime/6)) == 1){
Q2 <- Q2+1
return (1)
} else if(as.numeric(floor(sentTime/6)) == 2){
Q3 <- Q3+1
return (2)
} else{
Q4 <- Q4+1
return (3)
}
})
tweets <- read.csv("tweets1.csv",stringsAsFactors = FALSE)
finalResult <- unique(tweets$user_id)
head(finalResult)
unique(tweets)
head(unique(tweets))
unique(tweets)
unique(tweets$user_id)
tweets[, unique(tweets$user_id)]
u <- unique(tweets$user_id)
tweets[u,]
tweets[,u]
as.data.frame(u)
u <- as.data.frame(u)
tweets[, u]
tweets[u,]
unique(tweets)
distinct(tweets)
distinct(tweets$user_id)
distinct(tweets)
################################################################
library(dplyr)
distinct(select(tweets$user_id))
distinct(select(tweets, user_id))
select(tweets, user_id)
select(tweets, 'user_id')
tweets$user_id
dim(tweets)
View(tweets)
################################################################
library(dplyr)
library(ggplot2)
library(neuralnet)
library(MASS)
#library(caret)
library(ggplot2)
library(ggthemes)
library(cowplot)
library(caTools)
library(e1071)
library(ROCR)
library(dplyr)
library(GGally)
library(prettyunits)
library(chron)
library(lubridate)
library(tidyr)
library(cluster)
#####################################################################
#       I. EDA                                                      #
#####################################################################
###### DATA UNDERSTANDING, PREPARATION & DATA ANALYSIS ##############
startTime <- Sys.time()
tweets <- read.csv("tweets1.csv",stringsAsFactors = FALSE)
finalResult <- unique(tweets$user_id)
# structure of tweets dataframes
str(tweets)        # 140640 obs. of  14 variables
# summary of tweets dataframes
summary(tweets)
sum(duplicated(tweets$id))  # id is unique in the whole data
#removing the rows which contains NA's and empty values
tweets <- tweets[rowSums(is.na(tweets)) != ncol(tweets),]
tweets <- tweets[!apply(tweets == "", 1, all),]
sum(is.na(tweets))  # 0 NA values so no need to do anything
sum(tweets=="") # 0 empty data in columns
# Removing the Redundant Columns
tweets <- tweets[,-7]
tweets <- tweets[rowSums(is.na(tweets)) != ncol(tweets),]
tweets <- tweets[!apply(tweets == "", 1, all),]
if(any(is.na(tweets[, "created_at"]))){
tweets <- tweets[!(is.na(tweets$created_at) | tweets$created_at == ""), ]
}
if(any(is.na(tweets[, "text"]))){
tweets <- tweets[!(is.na(tweets$text) | tweets$text==""), ]
}
if(any(is.na(tweets[, "favorite_count"]))){
tweets <- tweets[!(is.na(tweets$favorite_count) | tweets$favorite_count == ""), ]
}
if(any(is.na(tweets[, "followers_count"]))){
tweets <- tweets[!(is.na(tweets$followers_count) | tweets$followers_count==""), ]
}
if(any(is.na(tweets[, "friends_count"]))){
tweets <- tweets[!(is.na(tweets$friends_count) | tweets$friends_count==""), ]
}
if(any(is.na(tweets[, "user_created_at"]))){
tweets <- tweets[!(is.na(tweets$user_created_at) | tweets$user_created_at==""), ]
}
if(any(is.na(tweets[, "tweet_language"]))){
tweets <- tweets[!(is.na(tweets$tweet_language) | tweets$tweet_language==""), ]
}
#Utility function returns the difference in days between two date objects
# @param1 - date object one
# @param2 - date object two
# @return - differnce between two date objects in terms of days
dateDifference <- function(date1, date2=Sys.Date()){
as.numeric(difftime(date2,date1,units="days"))
}
##### convert continous independent variables values into numeric
tweets$favorite_count <- as.numeric(tweets$favorite_count)
tweets$retweet_count <- as.numeric(tweets$retweet_count)
tweets$followers_count <- as.numeric(tweets$followers_count)
tweets$friends_count <- as.numeric(tweets$friends_count)
# Derived columns
processeduserLongevity <- mutate(tweets, userLongevity = round(dateDifference(ymd_hms(user_created_at))))
tweets <- processeduserLongevity
processedtweetCount <- transform(tweets, tweetCount = ave(user_id, user_id, FUN = length))
tweets <- processedtweetCount
tweets$tweetCount <- as.numeric(tweets$tweetCount)
processedfriendShipRatio <- mutate(tweets, friendShipRatio = (tweets$friends_count/ tweets$userLongevity)*10)
tweets <- processedfriendShipRatio
processedfavoriteCountRatio <- mutate(tweets, favoriteCountRatio = tweets$favorite_count / tweets$userLongevity)
tweets <- processedfavoriteCountRatio
processedtweetsRatio <- mutate(tweets, tweetsRatio = tweets$tweetCount / tweets$userLongevity)
tweets <- processedtweetsRatio
unique(tweets)
unique(tweets$user_id)
class(unique(tweets$user_id))
class(as.data.frame(unique(tweets$user_id)))
u <- as.data.frame(unique(tweets$user_id))
u
as.vector(u)
u <- as.vector(u)
tweets[, u]
u
duplicated(tweets)
duplicated(tweets&user_id)
duplicated(tweets$user_id)
tweets[!duplicated(tweets$user_id), ]
tweets <- read.csv("tweets1.csv",stringsAsFactors = FALSE)
finalResult <- tweets[!duplicated(tweets$user_id), ]
finalResult
# structure of tweets dataframes
str(tweets)        # 140640 obs. of  14 variables
# summary of tweets dataframes
summary(tweets)
sum(duplicated(tweets$id))  # id is unique in the whole data
#removing the rows which contains NA's and empty values
tweets <- tweets[rowSums(is.na(tweets)) != ncol(tweets),]
tweets <- tweets[!apply(tweets == "", 1, all),]
sum(is.na(tweets))  # 0 NA values so no need to do anything
sum(tweets=="") # 0 empty data in columns
# Removing the Redundant Columns
tweets <- tweets[,-7]
tweets <- tweets[rowSums(is.na(tweets)) != ncol(tweets),]
tweets <- tweets[!apply(tweets == "", 1, all),]
if(any(is.na(tweets[, "created_at"]))){
tweets <- tweets[!(is.na(tweets$created_at) | tweets$created_at == ""), ]
}
if(any(is.na(tweets[, "text"]))){
tweets <- tweets[!(is.na(tweets$text) | tweets$text==""), ]
}
if(any(is.na(tweets[, "favorite_count"]))){
tweets <- tweets[!(is.na(tweets$favorite_count) | tweets$favorite_count == ""), ]
}
if(any(is.na(tweets[, "followers_count"]))){
tweets <- tweets[!(is.na(tweets$followers_count) | tweets$followers_count==""), ]
}
if(any(is.na(tweets[, "friends_count"]))){
tweets <- tweets[!(is.na(tweets$friends_count) | tweets$friends_count==""), ]
}
if(any(is.na(tweets[, "user_created_at"]))){
tweets <- tweets[!(is.na(tweets$user_created_at) | tweets$user_created_at==""), ]
}
if(any(is.na(tweets[, "tweet_language"]))){
tweets <- tweets[!(is.na(tweets$tweet_language) | tweets$tweet_language==""), ]
}
#Utility function returns the difference in days between two date objects
# @param1 - date object one
# @param2 - date object two
# @return - differnce between two date objects in terms of days
dateDifference <- function(date1, date2=Sys.Date()){
as.numeric(difftime(date2,date1,units="days"))
}
##### convert continous independent variables values into numeric
tweets$favorite_count <- as.numeric(tweets$favorite_count)
tweets$retweet_count <- as.numeric(tweets$retweet_count)
tweets$followers_count <- as.numeric(tweets$followers_count)
tweets$friends_count <- as.numeric(tweets$friends_count)
# Derived columns
processeduserLongevity <- mutate(tweets, userLongevity = round(dateDifference(ymd_hms(user_created_at))))
# Derived columns
processeduserLongevity <- mutate(tweets, userLongevity = round(dateDifference(ymd_hms(user_created_at))))
tweets <- processeduserLongevity
finalResult <-processeduserLongevity
finalResult
View(finalResult)
processeduserLongevity
processeduserLongevity[!duplicated(processeduserLongevity$user_id)]
processeduserLongevity[!duplicated(processeduserLongevity)]
class(processeduserLongevity)
processeduserLongevity[, 1]
processeduserLongevity[1, ]
finalResult <- processeduserLongevity[!duplicated(processeduserLongevity$user_id), ]
finalResult
processeduserLongevity <- processeduserLongevity[!duplicated(processeduserLongevity$user_id), ]
################################################################
library(dplyr)
library(neuralnet)
library(ggplot2)
library(MASS)
#library(caret)
library(ggplot2)
library(cowplot)
library(ggthemes)
library(caTools)
library(e1071)
library(ROCR)
library(dplyr)
library(GGally)
library(prettyunits)
library(chron)
library(lubridate)
library(tidyr)
library(cluster)
#####################################################################
#       I. EDA                                                      #
#####################################################################
###### DATA UNDERSTANDING, PREPARATION & DATA ANALYSIS ##############
startTime <- Sys.time()
tweets <- read.csv("tweets1.csv",stringsAsFactors = FALSE)
finalResult <- tweets[!duplicated(tweets$user_id), ]
din(finalResult)
dim(finalResult)
finalResult <- tweets[!duplicated(tweets$user_id), ]
# structure of tweets dataframes
str(tweets)        # 140640 obs. of  14 variables
sum(duplicated(tweets$id))  # id is unique in the whole data
#removing the rows which contains NA's and empty values
tweets <- tweets[rowSums(is.na(tweets)) != ncol(tweets),]
tweets <- tweets[!apply(tweets == "", 1, all),]
# summary of tweets dataframes
summary(tweets)
sum(is.na(tweets))  # 0 NA values so no need to do anything
sum(tweets=="") # 0 empty data in columns
# Removing the Redundant Columns
tweets <- tweets[,-7]
tweets <- tweets[rowSums(is.na(tweets)) != ncol(tweets),]
tweets <- tweets[!apply(tweets == "", 1, all),]
if(any(is.na(tweets[, "created_at"]))){
tweets <- tweets[!(is.na(tweets$created_at) | tweets$created_at == ""), ]
}
if(any(is.na(tweets[, "text"]))){
tweets <- tweets[!(is.na(tweets$text) | tweets$text==""), ]
}
if(any(is.na(tweets[, "favorite_count"]))){
tweets <- tweets[!(is.na(tweets$favorite_count) | tweets$favorite_count == ""), ]
}
if(any(is.na(tweets[, "followers_count"]))){
tweets <- tweets[!(is.na(tweets$followers_count) | tweets$followers_count==""), ]
}
if(any(is.na(tweets[, "friends_count"]))){
tweets <- tweets[!(is.na(tweets$friends_count) | tweets$friends_count==""), ]
}
if(any(is.na(tweets[, "user_created_at"]))){
tweets <- tweets[!(is.na(tweets$user_created_at) | tweets$user_created_at==""), ]
}
if(any(is.na(tweets[, "tweet_language"]))){
tweets <- tweets[!(is.na(tweets$tweet_language) | tweets$tweet_language==""), ]
}
#Utility function returns the difference in days between two date objects
# @param1 - date object one
# @param2 - date object two
# @return - differnce between two date objects in terms of days
dateDifference <- function(date1, date2=Sys.Date()){
as.numeric(difftime(date2,date1,units="days"))
}
##### convert continous independent variables values into numeric
tweets$favorite_count <- as.numeric(tweets$favorite_count)
tweets$retweet_count <- as.numeric(tweets$retweet_count)
tweets$followers_count <- as.numeric(tweets$followers_count)
tweets$friends_count <- as.numeric(tweets$friends_count)
# Derived columns
processeduserLongevity <- mutate(tweets, userLongevity = round(dateDifference(ymd_hms(user_created_at))))
tweets <- processeduserLongevity
finalResult <- processeduserLongevity[!duplicated(processeduserLongevity$user_id), ]
dim(finalResult)
head(finalRelu)
head(finalResult, 1)
finalResult
################################################################
library(dplyr)
library(ggplot2)
library(neuralnet)
library(MASS)
#library(caret)
library(ggplot2)
library(cowplot)
library(ggthemes)
library(caTools)
library(e1071)
library(ROCR)
library(dplyr)
library(GGally)
library(prettyunits)
library(chron)
library(lubridate)
library(tidyr)
library(cluster)
#####################################################################
#       I. EDA                                                      #
#####################################################################
###### DATA UNDERSTANDING, PREPARATION & DATA ANALYSIS ##############
startTime <- Sys.time()
tweets <- read.csv("tweets1.csv",stringsAsFactors = FALSE)
finalResult <- tweets[!duplicated(tweets$user_id), ]
# structure of tweets dataframes
str(tweets)        # 140640 obs. of  14 variables
# summary of tweets dataframes
summary(tweets)
sum(duplicated(tweets$id))  # id is unique in the whole data
#removing the rows which contains NA's and empty values
tweets <- tweets[rowSums(is.na(tweets)) != ncol(tweets),]
tweets <- tweets[!apply(tweets == "", 1, all),]
sum(is.na(tweets))  # 0 NA values so no need to do anything
sum(tweets=="") # 0 empty data in columns
# Removing the Redundant Columns
tweets <- tweets[,-7]
tweets <- tweets[rowSums(is.na(tweets)) != ncol(tweets),]
tweets <- tweets[!apply(tweets == "", 1, all),]
if(any(is.na(tweets[, "created_at"]))){
tweets <- tweets[!(is.na(tweets$created_at) | tweets$created_at == ""), ]
}
if(any(is.na(tweets[, "text"]))){
tweets <- tweets[!(is.na(tweets$text) | tweets$text==""), ]
}
if(any(is.na(tweets[, "favorite_count"]))){
tweets <- tweets[!(is.na(tweets$favorite_count) | tweets$favorite_count == ""), ]
}
if(any(is.na(tweets[, "followers_count"]))){
tweets <- tweets[!(is.na(tweets$followers_count) | tweets$followers_count==""), ]
}
if(any(is.na(tweets[, "friends_count"]))){
tweets <- tweets[!(is.na(tweets$friends_count) | tweets$friends_count==""), ]
}
if(any(is.na(tweets[, "user_created_at"]))){
tweets <- tweets[!(is.na(tweets$user_created_at) | tweets$user_created_at==""), ]
}
if(any(is.na(tweets[, "tweet_language"]))){
tweets <- tweets[!(is.na(tweets$tweet_language) | tweets$tweet_language==""), ]
}
#Utility function returns the difference in days between two date objects
# @param1 - date object one
# @param2 - date object two
# @return - differnce between two date objects in terms of days
dateDifference <- function(date1, date2=Sys.Date()){
as.numeric(difftime(date2,date1,units="days"))
}
##### convert continous independent variables values into numeric
tweets$favorite_count <- as.numeric(tweets$favorite_count)
tweets$retweet_count <- as.numeric(tweets$retweet_count)
tweets$followers_count <- as.numeric(tweets$followers_count)
tweets$friends_count <- as.numeric(tweets$friends_count)
# Derived columns
processeduserLongevity <- mutate(tweets, userLongevity = round(dateDifference(ymd_hms(user_created_at))))
tweets <- processeduserLongevity
finalResult <- processeduserLongevity[!duplicated(processeduserLongevity$user_id), ]
processedtweetCount <- transform(tweets, tweetCount = ave(user_id, user_id, FUN = length))
tweets <- processedtweetCount
finalResult <- processedtweetCount[!duplicated(processedtweetCount$user_id), ]
tweets$tweetCount <- as.numeric(tweets$tweetCount)
processedfriendShipRatio <- mutate(tweets, friendShipRatio = (tweets$friends_count/ tweets$userLongevity)*10)
tweets <- processedfriendShipRatio
finalResult <- processedfriendShipRatio[!duplicated(processedfriendShipRatio$user_id), ]
processedfavoriteCountRatio <- mutate(tweets, favoriteCountRatio = tweets$favorite_count / tweets$userLongevity)
tweets <- processedfavoriteCountRatio
finalResult <- processedfavoriteCountRatio[!duplicated(processedfavoriteCountRatio$user_id), ]
processedtweetsRatio <- mutate(tweets, tweetsRatio = tweets$tweetCount / tweets$userLongevity)
tweets <- processedtweetsRatio
finalResult <- processedtweetsRatio[!duplicated(processedtweetsRatio$user_id), ]
#Compute Twitting Period - Which duration of the day does the user sends tweet
Q1 <- 0
Q2 <- 0
Q3 <- 0
Q4 <- 0
tweetingPeriod <- sapply(tweets$created_at, function(tweetTime){
sentTime <- hour(ymd_hms(tweetTime))
if(as.numeric(floor(sentTime/6)) == 0){
Q1 <- Q1+1
return (0)
} else if(as.numeric(floor(sentTime/6)) == 1){
Q2 <- Q2+1
return (1)
} else if(as.numeric(floor(sentTime/6)) == 2){
Q3 <- Q3+1
return (2)
} else{
Q4 <- Q4+1
return (3)
}
})
tweets <- transform(tweets, tweetingPeriod = tweetingPeriod)
tweets <- transform(tweets, tweetingPeriod = tweetingPeriod)
finalResult <- tweets[!duplicated(tweets$user_id), ]
finalResult <- tweets[!duplicated(tweets$user_id), ]
#segregate Users who are evey much active from the rest based on followers count
ggplot(finalResult, aes(finalResult$user_id, finalResult$followers_count, color = user_id)) + geom_point()
dim(finalResult)
help("geom_point")
help("ggplot")
#segregate Users who are evey much active from the rest based on followers count
ggplot(finalResult, aes(finalResult$user_id, finalResult$followers_count, color = user_id, xlab("User Id"), ylab("Followers Count"))) + geom_point()
help(aes)
#segregate Users who are evey much active from the rest based on followers count
ggplot(finalResult,xlab("User ID"), ylab("Followers Count"), aes(finalResult$user_id, finalResult$followers_count, color = user_id)) + geom_point()
#segregate Users who are evey much active from the rest based on followers count
ggplot(finalResult, aes(finalResult$user_id, finalResult$followers_count, color = user_id)) + geom_point()
#segregate Users who are evey much active from the rest based on followers count
ggplot(finalResult, aes(finalResult$user_id, finalResult$followers_count, color = user_id),xlab("User ID"), ylab("Followers Count")) + geom_point()
#segregate Users who are evey much active from the rest based on followers count
ggplot(finalResult, aes(finalResult$user_id, finalResult$followers_count, color = user_id),xlab("User ID"), ylab("Followers Count")) + geom_point()
